plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.goodjob'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jar {
    enabled = false
}

repositories {
    mavenCentral()
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.goodjob'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }

    dependencies {
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        //lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // jwt
        implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

        //security
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // actuator
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'io.micrometer:micrometer-registry-prometheus'

        // oauth
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

        // AWS CloudWatch appender
        implementation'ca.pjer:logback-awslogs-appender:1.6.0'

        // Query Dsl
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"

        //jasypt
        implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

        // xml
        implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '4.0.2'
        // Mail
        implementation 'org.springframework.boot:spring-boot-starter-mail'

        //Disk I/O
        runtimeOnly 'com.mysql:mysql-connector-j'
        runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'


    }

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
//
//    bootJar {
//        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    clean {
        delete file('src/main/generated')
    }
    compileJava {
        options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
    }

}



dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation project(path: ':core')
    implementation project(path: ':batch')

    //Disk I/O
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'


    //view
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'



    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'


    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // xml
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '4.0.2'

    //레이아웃
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

}



bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('test') {
    useJUnitPlatform()
}

clean {
    delete file('src/main/generated')
}
compileJava {
    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}
