steps:
# This step clones the hello-cloudbuild-env repository
#- name: 'gcr.io/cloud-builders/gcloud'
#  id: Clone env repository
#  entrypoint: /bin/sh
#  args:
#  - '-c'
#  - |
#    gcloud source repos clone hello-cloudbuild-env && \
#    cd hello-cloudbuild-env && \
#    git checkout candidate && \
#    git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)')


# This step builds the container image.
- name: 'gcr.io/cloud-builders/docker'
  id: Build
  args:
  - 'build'
  - '-t'
  - 'us-central1-docker.pkg.dev$PROJECT_ID/my-repository/goodjob-prod:$SHORT_SHA'
  - '.'

# This step pushes the image to Artifact Registry
# The PROJECT_ID and SHORT_SHA variables are automatically
# replaced by Cloud Build.
- name: 'gcr.io/cloud-builders/docker'
  id: Push
  args:
  - 'push'
  - 'us-central1-docker.pkg.dev$PROJECT_ID/my-repository/goodjob-prod:$SHORT_SHA'

# This step pushes the manifest back to hello-cloudbuild-env
#- name: 'gcr.io/cloud-builders/gcloud'
#  id: Push manifest
#  entrypoint: /bin/sh
#  args:
#  - '-c'
#  - |
#    set -x && \
#    cd hello-cloudbuild-env && \
#    git add kubernetes.yaml && \
#    git commit -m "Deploying image us-central1-docker.pkg.dev$PROJECT_ID/my-repository/goodjob-prod:${SHORT_SHA}
#    Built from commit ${COMMIT_SHA} of repository hello-cloudbuild-app
#    Author: $(git log --format='%an <%ae>' -n 1 HEAD)" && \
#    git push origin candidate